Controllers & Views
==========================================================================================
* Check routes & controller notes


rails g scaffold Project
rails g scaffold Project title:string body:text

rails g scaffold_controller [model] // generate without fields
rails g scaffold_controller [model]  title:string body:text // generate with fields

rails g scaffold Project
rails g scaffold Project title:string body:text
rails g scaffold_controller [model] // generate without fields
rails g scaffold_controller [model]  title:string body:text // generate with fields

rails g controller home --> home_controller.rb (HomeController)

- Now, To Check the code of any gem, 
> bundle open jquery-rails

To open a bundled gem, set $EDITOR or $BUNDLER_EDITOR

bundle exec rake routes




Controllers
------------------------------------------------------------------------

- General

	- params is where the data 
	- params is Hash


	def show
	  @article = Article.find(params[:id])
	end

	def new
		@article = Article.new	--> to be used by teh form
	end

	def create
		@item = Item.new(item_params)
	end

	def index
	  @articles = case params[:order_by]
		when 'title'     then Article.order('title')
		when 'published' then Article.order('created_at DESC')
		else                  Article.all
	  end
	end

	private

    def item_params
      params.fetch(:item, {}).permit(:name, :id, :title, :summary, :body, :type, :status, :user_id, :info, :reference_id, :tags)
    end

	
- Filters

	
    before_filter runs before the controller action
    after_filter runs after the controller action
    around_filter yields to the controller action wherever it chooses

		before_filter do
			@article = Article.find(params[:id]) if params[:id]
		end

		Or

		before_filter :load_article
		# Actions...

		private

		def load_article
			@article = Article.find(params[:id]) if params[:id]
		end

	- around_filter
	
		around_filter :wrap_actions

		def wrap_actions
		  begin
			yield
		  rescue
			render text: "It broke!"
		  end
		end

	- only and except
	
		before_filter :load_article, only: [:show, :edit, :update, :destroy]
		before_filter :load_article, except: [:index, :new, :create]
	
	- Sharing Filters
	
		- Sharing through ApplicationController
		- Generalizing to find_resource
	
			def find_resource
				class_name = params[:controller].singularize
				klass = class_name.camelize.constantize
				self.instance_variable_set "@" + class_name, klass.find(params[:id])
			end

	- Friendly-URl
	
		- Always use paths generated by the router
		
			person_path(@person)
	
		- slug
		
			class Person < ActiveRecord::Base
				def to_param		<-- override
					[id, name.parameterize].join("-")
				end
			end

			# of course you just need to use to_i with params[:id]
			# custom finder
			
			def self.find_by_param(input)
				find_by_name(input)
			end




Renders & Redirects & Templates & Layouts & Partials
-------------------------------------------------------------------------------------------------------

- Render and Redirects

	    render action: :edit 	# this will go to edit template inside views/controller folder
	    render :edit 			# same
		redirect_to(@book) 		# redirecto to @book show page 
		
	    render 'articles/new'	# render new template in views/articles folder (could be for different controller)
	    
		render text: "Hello, World!"	# render plain text
		render xml: @article
		render json: @article
			

		# render a view based on its name along with routes
	
			get "/home/test", to: "home#test"	--> controller home and method test --> views/home/test.html.erb 

		# pass params to template (same as partial)	
		# controller.test		
	    render :template => "home/test", :locals => {:bo => "hh"}

		# test.html.erb
		<%= bo if !local_assigns[:bo].blank? %>
	
		# layouts
		render :show, layout: 'top_story'
		render :show, layout: false
		
		# Redirect
		redirect_to articles_path
		redirect_to 'http://rubyonrails.org'
		redirect_to 'http://rubyonrails.org', status: 301
		redirect_to articles_path, notice: "Article Created"
		redirect_to login_path, alert: "You must be logged in!"

		# redirect_to and render do not return
		redirect_to login_path unless current_user.admin?
		redirect_to articles_path, notice: "Article '#{article.title}' was deleted."
		
		# The redirect_to does not stop execution of the method
		# so if you have multiple redirects, split them by conditions or use: and return
		
		

- Layouts

	- default layout is layouts/application.html.erb
	- specify layout at controller level
	
		  layout "application"

	- specify layout at method level
	
		    render :template => "home/test", :layout => "application"
		    render :template => "home/test", :layout => false

	- content_for

		# app/views/layouts/static_pages.html.erb
		<% content_for :stylesheets do %>
			#navbar {display: none}
		<% end %>
		 
		Then your application.html.erb layout needs to be set up to catch that content and use it, for instance by adding this #yield line:

		# app/views/layouts/application.html.erb
		...
		<head>
			<style><%= yield :stylesheets %></style>
		</head>


- Partials

	<%= render "shared/menu" %>
	<%= render :partial => "shared/something", :locals => {:bo => "hh"}
	<%= render partial: "link_area", layout: "graybar" %>

	# Within the customer partial, the customer variable will refer to @new_customer from the parent view.
	<%= render partial: "customer", object: @new_customer %>

	# Assuming that the @customer instance variable contains an instance of the Customer model, 
	# this will use _customer.html.erb to render it and will pass the local variable customer 
	# into the partial which will refer to the @customer instance variable in the parent view.
	<%= render @customer %>

	# this will render _product.html.erb (same folder)
	# and wil fetch each product as --> <p>Product Name: <%= product.name %></p>	
	<%= render partial: "product", collection: @products %> --> 
	<%= render partial: "product", collection: @products, as: :item %> --> 

	# also this will render index.html.erb
	<%= render @products %>

	- partials can be rendered inside methods as well when using ajax

	- spacers
	# Rails will render the _product_ruler partial (with no data passed in to it) between each pair of _product partials.
	<%= render partial: @products, spacer_template: "product_ruler" %>

	# using collections with layout
	<%= render partial: "product", collection: @products, layout: "special_layout" %>
	
	# magical partial
	# this
	<%= render partial: 'comments' %>
	# could be written
	<%= render 'comments' %>
	
	# this will iterate throught _article.html.erb partial
	<ul id='articles'><%= render @articles %></ul>




Ajax & ejs
------------------------------------------------------------------------
There are several ways to use ajax with rails applications.
- the hard way, using jQuery directly .. or any other libraries 
- the rails way .. 

	Rails.ajax({
		url: '/url',
		type: 'get',
		data: '',
		success: function(data) {},
		error: function(data) {},
	})

	Or (recommended)
	
	
- rails-ujs

	





- Helpers
------------------------------------------------------------------------

- Ready made helpers

	time_ago_in_words(Time.now)
	# "less than a minute"
	time_ago_in_words(Time.now + 60)
	# "1 minute"
	time_ago_in_words(Time.now + 600)
	# "10 minutes"

	number_to_human(10_000)
	# "10 Thousand"

- How

	# app/helpers/user_helper.rb
	module UserHelper
	  def format_name(user)
		if user.gender == "M"
		  "Mr. #{user.name}"
		else
		  "Ms. #{user.name}"
		end
	  end
	end


	This helper will be autoloaded when dealing with users controller & views

	<%= format_name(@user) %>
	
- Using helpers from controller

	class UsersController
	  def index
		helpers.time_ago_in_words(Time.now)
	  end
	end

- Note

	- don;t relay on @objects, but pass parameters
	


- Presenter
-----------------------------------------------------------------------

	# app/presenters/post_presenter.rb
	class PostPresenter
	  def initialize(post)
		@post = post
	  end
	  def title_without_forbidden_words
		@post.title.gsub("forbidden word", "")
	  end
	  def css_color
		@post.draft? ? "orange" : "green"
	  end
	end

	- in your view
	
	<% presenter = PostPresenter.new(post) %>
	<p>
	  Post title: <%= presenter.title_without_forbidden_words %>
	  <%= link_to "Read post", post, class: "w-75 p-3 text-#{presenter.css_color} border-#{presenter.css_color}" %>
	</p>




Other awesome libraries
========================================================================
































